% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_scenarios.R
\name{run_scenarios}
\alias{run_scenarios}
\title{Run a batch of Management Strategy Evaluation (MSE) scenarios}
\usage{
run_scenarios(
  scenarios,
  niter = 1000,
  seed = "reproducible",
  params = "Ohlberger",
  output_dir = paste0(here::here(), "/outputs")
)
}
\arguments{
\item{scenarios}{Selector passed to \code{\link[=select_scenarios]{select_scenarios()}}. One of:
\itemize{
\item \code{"all"} — run all allowed scenarios;
\item a single dplyr-style filter \strong{string}, e.g.
\code{"selectivity == 'unselective' & factorMSY \%in\% c(0.75, 1.50)"};
\item an integer vector of scenario IDs, e.g. \code{c(1, 12, 37)}.
}
See \code{\link[=select_scenarios]{select_scenarios()}} for details.}

\item{niter}{Integer. Number of Monte Carlo iterations \strong{per scenario}. Default \code{1000}.}

\item{seed}{Character. Seeding strategy across the scenario–iteration grid.
Must be exactly \code{"reproducible"} (seeds are \code{1:(niter*nscen)}) or \code{"random"}
(seeds are sampled from \code{1:1000000}). Any other value triggers an error.}

\item{params}{Either a \strong{named profile} (\code{"Ohlberger"} or \code{"Kuskokwim"}) that will be
resolved via \code{\link[=resolve_profile]{resolve_profile()}}, or a fully-specified \strong{list} of parameter
values to pass through to \code{\link[=build_config]{build_config()}}. Default \code{"Ohlberger"}.}

\item{output_dir}{String. Directory where the \code{.rds} run artifact and other
outputs will be written. Default \code{file.path(here::here(), "outputs")}.}
}
\value{
An object of class \strong{\code{ssi_run}} with components:
\itemize{
\item \code{meta}: run metadata (timestamp, seeds, niter, nscen, dirs, profile);
\item \code{scenarios}: the filtered scenario tibble that was run;
\item \code{results}: nested per-scenario/per-iteration outputs (lists of lists).
}
A copy is also saved as an \code{.rds} under \code{output_dir}.
}
\description{
High-level interface to run the simulation across a set of scenarios and
Monte Carlo iterations. This function selects which scenarios to run,
seeds each run for reproducibility or randomness, executes the simulation,
and saves outputs to disk.
}
\section{Files written}{

Files are written under \code{output_dir} (created if needed):
\itemize{
\item \verb{run_<timestamp>.rds} — serialized \code{ssi_run} object;
\item \verb{run_<timestamp>_scen.xlsx} — scenario table (via \strong{openxlsx}).
}
}

\section{Dependencies}{

Requires packages \strong{here}, \strong{progress}, and \strong{openxlsx} for file paths,
progress bar, and Excel export (all imported at call sites with \code{pkg::fun()}).
}

\examples{
\dontrun{
# All allowed scenarios, reproducible seeding
run_scenarios("all", niter = 1000, seed = "reproducible")

# Subset by filter
sel <- "selectivity == 'unselective' & mgmt \%in\% c('smsy_goal','s_eq_goal') & factorMSY \%in\% c(0.75, 1.50)"
run_scenarios(sel, niter = 1000, seed = "reproducible", params = "Ohlberger")

# Specific scenario IDs
run_scenarios(c(1, 12, 37), niter = 500, seed = "random", params = "Ohlberger")
}
}
\seealso{
\code{\link[=select_scenarios]{select_scenarios()}} for scenario selection,
\code{\link[=run_model]{run_model()}} for the single-simulation routine, \code{\link[=build_config]{build_config()}} and
\code{\link[=resolve_profile]{resolve_profile()}} for configuration.
}
